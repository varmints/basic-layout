---
import { Image } from "astro:assets";
import Button from "./Button.astro";
import TextInput from "./TextInput.astro";
import TextArea from "./TextArea.astro";
import Checkbox from "./Checkbox.astro";
import ContactImage from "../images/ContactImage.jpg";
---

<section class="contact-section">
  <div class="container">
    <div class="contact-wrapper">
      <div class="contact-form-content">
        <h2 class="contact-heading">Napisz do nas</h2>
        <form class="contact-form" novalidate>
          <div class="form-row">
            <TextInput label="Imię" name="name" required />
            <TextInput label="Nazwisko" name="surname" required />
          </div>

          <div class="form-row">
            <TextInput
              label="Adres e-mail"
              name="email"
              type="email"
              required
            />
            <TextInput label="Numer telefonu" name="phone" type="tel" />
          </div>

          <TextArea label="Twoja wiadomość" name="message" rows={5} required />

          <div class="checkbox-group">
            <Checkbox
              name="consent"
              id="consent"
              label="Zapoznałem się z regulaminem i wyrażam zgodę na przetwarzanie moich danych osobowych przez Sungroup.pl"
              required
            />
            <div class="checkbox-error-message">Zgoda jest wymagana</div>
          </div>

          <div class="form-submit">
            <Button text="Wyślij wiadomość" type="submit" variant="primary" />
          </div>
        </form>
      </div>
      <div class="contact-image">
        <Image
          src={ContactImage}
          alt="Contact Us"
          class="w-full h-full object-cover"
          loading="lazy"
          width={600}
          height={600}
        />
      </div>
    </div>
  </div>
</section>

<script>
  const form = document.querySelector(".contact-form") as HTMLFormElement;
  const nameInput = form.querySelector(
    'input[name="name"]',
  ) as HTMLInputElement;
  const surnameInput = form.querySelector(
    'input[name="surname"]',
  ) as HTMLInputElement;
  const emailInput = form.querySelector(
    'input[name="email"]',
  ) as HTMLInputElement;
  const phoneInput = form.querySelector(
    'input[name="phone"]',
  ) as HTMLInputElement;
  const messageTextarea = form.querySelector(
    'textarea[name="message"]',
  ) as HTMLTextAreaElement;
  const consentCheckbox = form.querySelector(
    'input[name="consent"]',
  ) as HTMLInputElement;
  const consentErrorMessage = form.querySelector(
    ".checkbox-error-message",
  ) as HTMLElement;

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const phoneRegex = /^[+]?[\d\s\-()]+$/;

  const setError = (element: HTMLElement, message: string) => {
    const inputControl = element.closest(".form-field");
    if (!inputControl) return;
    const errorDisplay = inputControl.querySelector(
      ".error-message",
    ) as HTMLElement | null;
    const inputElement = element as HTMLInputElement | HTMLTextAreaElement;

    inputElement.style.borderColor = "var(--red-color-900)";
    if (errorDisplay) {
      errorDisplay.innerText = message;
      errorDisplay.style.display = "block";
    }
  };

  const setSuccess = (element: HTMLElement) => {
    const inputControl = element.closest(".form-field");
    if (!inputControl) return;
    const errorDisplay = inputControl.querySelector(
      ".error-message",
    ) as HTMLElement | null;
    const inputElement = element as HTMLInputElement | HTMLTextAreaElement;

    inputElement.style.borderColor = "var(--green-color-900)";
    if (errorDisplay) {
      errorDisplay.innerText = "";
      errorDisplay.style.display = "none";
    }
  };

  const validateInputs = () => {
    let isValid = true;
    const nameValue = nameInput.value.trim();
    const surnameValue = surnameInput.value.trim();
    const emailValue = emailInput.value.trim();
    const phoneValue = phoneInput.value.trim();
    const messageValue = messageTextarea.value.trim();
    const consentChecked = consentCheckbox.checked;

    if (nameValue === "") {
      setError(nameInput, "Imię jest wymagane");
      isValid = false;
    } else {
      setSuccess(nameInput);
    }

    if (surnameValue === "") {
      setError(surnameInput, "Nazwisko jest wymagane");
      isValid = false;
    } else {
      setSuccess(surnameInput);
    }

    if (emailValue === "") {
      setError(emailInput, "Adres e-mail jest wymagany");
      isValid = false;
    } else if (!emailRegex.test(emailValue)) {
      setError(emailInput, "Wpisz poprawny adres email");
      isValid = false;
    } else {
      setSuccess(emailInput);
    }

    if (phoneValue === "") {
      setError(phoneInput, "Numer telefonu jest wymagany");
      isValid = false;
    } else if (!phoneRegex.test(phoneValue)) {
      setError(phoneInput, "Wpisz poprawny numer telefonu");
      isValid = false;
    } else {
      setSuccess(phoneInput);
    }

    if (messageValue === "") {
      setError(messageTextarea, "Wiadomość jest wymagana");
      isValid = false;
    } else {
      setSuccess(messageTextarea);
    }

    const checkboxControl = consentCheckbox.closest(".checkbox-group");
    const checkboxLabel = checkboxControl?.querySelector('label');
    if (!consentChecked) {
      if (checkboxLabel) checkboxLabel.style.color = 'var(--red-color-900)';
      if (consentErrorMessage) consentErrorMessage.style.display = "block";
      isValid = false;
    } else {
      if (checkboxLabel) checkboxLabel.style.color = 'inherit';
      if (consentErrorMessage) consentErrorMessage.style.display = "none";
    }

    return isValid;
  };

  form.addEventListener("submit", (e) => {
    if (!validateInputs()) {
      e.preventDefault();
      console.log("Walidacja formularza nie powiodła się.");
    } else {
      console.log("Walidacja formularza powiodła się. Przesyłanie...");
    }
  });

  [nameInput, surnameInput, emailInput, phoneInput, messageTextarea].forEach(input => {
    input.addEventListener('input', () => {
      const value = (input as HTMLInputElement | HTMLTextAreaElement).value.trim();
      if (value !== '') {
        input.style.borderColor = 'var(--gray-color-300)';
        const inputControl = input.closest(".form-field");
        if(inputControl) {
          const errorDisplay = inputControl.querySelector(".error-message") as HTMLElement | null;
          if (errorDisplay) errorDisplay.style.display = "none";
        }
      }
    });
  });
  
  consentCheckbox.addEventListener('change', () => {
    const checkboxControl = consentCheckbox.closest(".checkbox-group");
    const checkboxLabel = checkboxControl?.querySelector('label');
    if (checkboxLabel) {
      checkboxLabel.style.color = consentCheckbox.checked ? 'inherit' : 'var(--red-color-900)';
    }
    if (consentErrorMessage) {
      consentErrorMessage.style.display = consentCheckbox.checked ? "none" : "block";
    }
  });
</script>

<style>
  .contact-section {
    /* Box Model & Positioning */
    padding: 4rem 0;
    /* Visual Styles */
    background-color: var(--white-color);
  }

  .contact-wrapper {
    /* Box Model & Layout */
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr;
  }

  .contact-form-content {
    /* Box Model & Layout */
    flex: 1;
    padding: 1.5rem;
    /* Visual Styles */
    border-radius: 8px;
    background-color: var(--primary-color-50);
  }

  .contact-heading {
    /* Box Model */
    margin-bottom: 1.5rem;
    /* Typography */
    font-family: 'Poppins', sans-serif;
    font-size: 28px;
    line-height: 42px;
    font-weight: 600;
    color: var(--gray-color-900);
  }

  .contact-form {
    /* Box Model & Layout */
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-row {
    /* Box Model & Layout */
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    width: 100%;
  }

  .checkbox-group {
    /* Box Model */
    margin-top: -0.5rem;
  }

  .checkbox-error-message {
    /* Box Model */
    margin-top: 0.5rem;
    /* Typography */
    font-size: 12px;
    color: var(--red-color-900);
    display: none; /* Initially hidden */
  }

  .form-submit {
    /* Box Model & Layout */
    display: flex;
    justify-content: center;
    margin-top: 1rem;
    width: 100%;
  }

  .form-submit :global(button) {
    width: 100%;
  }

  .contact-image {
    /* Box Model & Layout */
    margin: auto;
    max-width: 100%;
    height: auto;
    display: none;
  }

  .contact-image img {
    /* Box Model */
    width: 100%;
    height: auto;
    /* Visual Styles */
    border-radius: 8px;
    object-fit: cover;
  }

  @media (min-width: 640px) {
    .contact-section {
      padding: 5rem 2rem;
    }

    .contact-form-content {
      padding: 2rem;
    }

    .form-row {
      flex-direction: row;
    }

    .form-submit {
      justify-content: flex-end;
    }

    .form-submit :global(button) {
      width: auto;
    }
  }

  @media (min-width: 768px) {
    .contact-image {
      display: block;
    }

    .contact-form-content {
      padding: 2.5rem;
    }
  }

  @media (min-width: 1024px) {
    .contact-section {
      padding: 6rem 0;
    }

    .contact-wrapper {
      grid-template-columns: 1fr 1fr;
    }

    .contact-form-content {
      padding: 3rem;
    }

    .contact-heading {
      margin-bottom: 2rem;
    }

    .form-row {
      flex-direction: row;
    }

    .checkbox-group {
      margin-top: -1.5rem;
    }
  }
</style>
